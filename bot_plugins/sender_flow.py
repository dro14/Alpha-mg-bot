from pyrogram.errors.exceptions.bad_request_400 import UserBlocked
from .redis_client import set_dict
from alpha.models import Address
from .utils import *
from .texts import *


def cargo_type(_, query, user_data):
    user_data["cargo_type"] = query.data
    user_data["current"] = "transport_type"
    set_dict(f"sender:{query.from_user.id}", user_data)

    transport_types = ["–°–∞–º–æ—Å–≤–∞–ª", "–í–∞–≥–æ–Ω"]
    reply_markup = make_reply_markup(transport_types)

    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:"
    query.edit_message_text(text, reply_markup=reply_markup)


def transport_type(_, query, user_data):
    user_data["transport_type"] = query.data
    user_data["current"] = "transport_number"
    set_dict(f"sender:{query.from_user.id}", user_data)

    if query.data == "–°–∞–º–æ—Å–≤–∞–ª":
        truck_numbers = Truck.objects.filter(status="–°–≤–æ–±–æ–¥–µ–Ω")
        truck_numbers = truck_numbers.values_list("number", flat=True)
        reply_markup = make_reply_markup(truck_numbers)

        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å–∞–º–æ—Å–≤–∞–ª–∞:"
        query.edit_message_text(text, reply_markup=reply_markup)
    else:
        text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):"
        query.edit_message_text(text)


def transport_number1(_, query, user_data):
    user_data["transport_number"] = query.data
    user_data["current"] = "weight"
    set_dict(f"sender:{query.from_user.id}", user_data)

    text = "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –≤ –∫–≥):"
    query.edit_message_text(text)


def transport_number2(_, message, user_data):
    user_data["transport_number"] = message.text
    user_data["current"] = "weight"
    set_dict(f"sender:{message.from_user.id}", user_data)

    text = "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –≤ –∫–≥):"
    message.reply(text)


def weight(_, message, user_data):
    user_data["weight"] = message.text
    user_data["current"] = "photo_1"
    set_dict(f"sender:{message.from_user.id}", user_data)

    text = "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ (1 —à—Ç):\n\n(–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá –≤ –≤–∏–¥–µ —Å–∫—Ä–µ–ø–∫–∏ üìé)"
    message.reply(text)


def photo_1_2(client, message, user_data):
    current = user_data["current"]
    user_data["current"] = f"photo_{int(current[-1:]) + 1}"

    user_data[current] = client.download_media(
        message.photo.file_id,
        in_memory=True,
    ).getvalue()

    if current.endswith("1"):
        text = "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ (1 —à—Ç):"
        user_data["photo_count"] = 1
    else:
        text = "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç—Ä–µ—Ç—å–µ —Ñ–æ—Ç–æ (1 —à—Ç):"
        user_data["photo_count"] = 2
    set_dict(f"sender:{message.from_user.id}", user_data)

    enough = "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
    button = InlineKeyboardButton(enough, callback_data=enough)
    reply_markup = InlineKeyboardMarkup([[button]])

    message.reply(text, reply_markup=reply_markup)


def photo_2_3(_, query, user_data):
    user = CustomUser.objects.get(user_id=query.from_user.id)
    sender_address = user.sender_address.address
    user_data["sender_address"] = sender_address
    user_data["sender"] = user_str(query.from_user)
    user_data["current"] = "receiver_address"
    set_dict(f"sender:{query.from_user.id}", user_data)

    receiver_addresses = Address.objects.exclude(address=sender_address)
    receiver_addresses = receiver_addresses.values_list("address", flat=True)
    reply_markup = make_reply_markup(receiver_addresses)

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
    query.edit_message_text(text, reply_markup=reply_markup)


def photo_3(client, message, user_data):
    user = CustomUser.objects.get(user_id=message.from_user.id)
    sender_address = user.sender_address.address
    user_data["sender_address"] = sender_address
    user_data["sender"] = user_str(message.from_user)
    user_data["current"] = "receiver_address"

    user_data["photo_3"] = client.download_media(
        message.photo.file_id,
        in_memory=True,
    ).getvalue()
    user_data["photo_count"] = 3
    set_dict(f"sender:{message.from_user.id}", user_data)

    receiver_addresses = Address.objects.exclude(address=sender_address)
    receiver_addresses = receiver_addresses.values_list("address", flat=True)
    reply_markup = make_reply_markup(receiver_addresses)

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
    message.reply(text, reply_markup=reply_markup)


def receiver_address(_, query, user_data):
    user_data["receiver_address"] = query.data
    user_data["current"] = "end"
    set_dict(f"sender:{query.from_user.id}", user_data)

    options = ["–£—Ç–≤–µ—Ä–¥–∏—Ç—å", "–°–±—Ä–æ—Å–∏—Ç—å"]
    reply_markup = make_reply_markup(options)

    caption = end_message(user_data)
    media = make_album(caption, user_data=user_data)

    query.message.reply_media_group(media)
    query.message.reply("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?", reply_markup=reply_markup)
    query.message.delete()


def end(client, query, user_data):
    if query.data == "–£—Ç–≤–µ—Ä–¥–∏—Ç—å":
        caption = confirm_delivery_message(user_data)
        media = make_album(caption, user_data=user_data)

        user_data.pop("current")
        user_data.pop("photo_count")
        user_data["status"] = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω"
        delivery = Delivery.objects.create(**user_data)

        text = "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–∑–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"

        button_text = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ"
        button = InlineKeyboardButton(button_text, callback_data=str(delivery.id))
        reply_markup = InlineKeyboardMarkup([[button]])

        address = Address.objects.get(address=user_data["receiver_address"])
        receivers = address.receiving_users.exclude(user_id=None)
        receivers = receivers.values_list("user_id", flat=True)
        for user_id in receivers:
            set_dict(
                f"receiver:{user_id}:{delivery.id}",
                {"current": "confirm_delivery"},
            )
            try:
                client.send_media_group(user_id, media)
                client.send_message(user_id, text, reply_markup=reply_markup)
            except UserBlocked:
                pass

        admins = User.objects.exclude(user_id=None)
        admins = admins.values_list("user_id", flat=True)
        for user_id in admins:
            try:
                client.send_media_group(user_id, media)
            except UserBlocked:
                pass

        update_truck(delivery, "–ó–∞–Ω—è—Ç")
        query.edit_message_text("–ü–æ—Å—Ç–∞–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞")
    else:
        query.edit_message_text("–ü–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

    redis.delete(f"sender:{query.from_user.id}")
